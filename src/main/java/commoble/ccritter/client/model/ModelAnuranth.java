// Date: 4/4/2014 3:10:50 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package commoble.ccritter.client.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class ModelAnuranth extends ModelBase
{
  //fields
    ModelRenderer bipedHead;
    ModelRenderer bipedBody;
    ModelRenderer bipedRightArm;
    ModelRenderer bipedLeftArm;
    ModelRenderer bipedRightLeg;
    ModelRenderer bipedLeftLeg;
    ModelRenderer leftclaw1;
    ModelRenderer leftclaw2;
    ModelRenderer leftclaw3;
    ModelRenderer rightclaw1;
    ModelRenderer rightclaw2;
    ModelRenderer rightclaw3;
    
    static float base_arm_rotate_x = -0.2745329F;
    static float base_claw_rotate_x = 0.2047198F;
    static float claw_rotate_offset = base_claw_rotate_x - base_arm_rotate_x;
  
  public ModelAnuranth()
  {
    textureWidth = 64;
    textureHeight = 32;
    
      bipedHead = new ModelRenderer(this, 0, 0);
      bipedHead.addBox(-3F, -4F, -6F, 6, 6, 8);
      bipedHead.setRotationPoint(0F, 0F, 0F);
      bipedHead.setTextureSize(64, 32);
      bipedHead.mirror = true;
      setRotation(bipedHead, 0F, 0F, 0F);
      bipedBody = new ModelRenderer(this, 16, 16);
      bipedBody.addBox(-3F, 0F, -2F, 6, 12, 4);
      bipedBody.setRotationPoint(0F, 2F, 0F);
      bipedBody.setTextureSize(64, 32);
      bipedBody.mirror = true;
      setRotation(bipedBody, 0.3490659F, 0F, 0F);
      bipedRightArm = new ModelRenderer(this, 40, 16);
      bipedRightArm.addBox(-1F, -1F, -2F, 2, 9, 3);
      bipedRightArm.setRotationPoint(-2.5F, 5F, 0F);
      bipedRightArm.setTextureSize(64, 32);
      bipedRightArm.mirror = true;
      setRotation(bipedRightArm, -0.1745329F, 0F, 0F);
      bipedLeftArm = new ModelRenderer(this, 40, 16);
      bipedLeftArm.addBox(-1F, -1F, -2F, 2, 9, 3);
      bipedLeftArm.setRotationPoint(2.5F, 5F, 0F);
      bipedLeftArm.setTextureSize(64, 32);
      bipedLeftArm.mirror = true;
      setRotation(bipedLeftArm, -0.1745329F, 0F, 0F);
      bipedRightLeg = new ModelRenderer(this, 0, 16);
      bipedRightLeg.addBox(-2.5F, 0F, -1F, 3, 12, 3);
      bipedRightLeg.setRotationPoint(-2F, 12F, 4F);
      bipedRightLeg.setTextureSize(64, 32);
      bipedRightLeg.mirror = true;
      setRotation(bipedRightLeg, 0F, 0F, 0F);
      bipedLeftLeg = new ModelRenderer(this, 0, 16);
      bipedLeftLeg.addBox(-0.5F, 0F, -1F, 3, 12, 3);
      bipedLeftLeg.setRotationPoint(2F, 12F, 4F);
      bipedLeftLeg.setTextureSize(64, 32);
      bipedLeftLeg.mirror = true;
      setRotation(bipedLeftLeg, 0F, 0F, 0F);
      leftclaw1 = new ModelRenderer(this, 0, 0);
      leftclaw1.addBox(-0.8F, 7F, -3.5F, 0, 4, 1);
      leftclaw1.setRotationPoint(2.5F, 5F, 0F);
      leftclaw1.setTextureSize(64, 32);
      leftclaw1.mirror = true;
      setRotation(leftclaw1, 0.1047198F, 0F, 0F);
      leftclaw2 = new ModelRenderer(this, 0, 0);
      leftclaw2.addBox(0F, 7F, -3.5F, 0, 4, 1);
      leftclaw2.setRotationPoint(2.5F, 5F, 0F);
      leftclaw2.setTextureSize(64, 32);
      leftclaw2.mirror = true;
      setRotation(leftclaw2, 0.1047198F, 0F, 0F);
      leftclaw3 = new ModelRenderer(this, 0, 0);
      leftclaw3.addBox(0.8F, 7F, -3.5F, 0, 4, 1);
      leftclaw3.setRotationPoint(2.5F, 5F, 0F);
      leftclaw3.setTextureSize(64, 32);
      leftclaw3.mirror = true;
      setRotation(leftclaw3, 0.1047198F, 0F, 0F);
      rightclaw1 = new ModelRenderer(this, 0, 0);
      rightclaw1.addBox(-0.8F, 7F, -3.5F, 0, 4, 1);
      rightclaw1.setRotationPoint(-2.5F, 5F, 0F);
      rightclaw1.setTextureSize(64, 32);
      rightclaw1.mirror = true;
      setRotation(rightclaw1, 0.1047198F, 0F, 0F);
      rightclaw2 = new ModelRenderer(this, 0, 0);
      rightclaw2.addBox(0F, 7F, -3.5F, 0, 4, 1);
      rightclaw2.setRotationPoint(-2.5F, 5F, 0F);
      rightclaw2.setTextureSize(64, 32);
      rightclaw2.mirror = true;
      setRotation(rightclaw2, 0.1047198F, 0F, 0F);
      rightclaw3 = new ModelRenderer(this, 0, 0);
      rightclaw3.addBox(0.8F, 7F, -3.5F, 0, 4, 1);
      rightclaw3.setRotationPoint(-2.5F, 5F, 0F);
      rightclaw3.setTextureSize(64, 32);
      rightclaw3.mirror = true;
      setRotation(rightclaw3, 0.1047198F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    bipedHead.render(f5);
    bipedBody.render(f5);
    bipedRightArm.render(f5);
    bipedLeftArm.render(f5);
    bipedRightLeg.render(f5);
    bipedLeftLeg.render(f5);
    leftclaw1.render(f5);
    leftclaw2.render(f5);
    leftclaw3.render(f5);
    rightclaw1.render(f5);
    rightclaw2.render(f5);
    rightclaw3.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
      this.bipedHead.rotateAngleY = par4 / (180F / (float)Math.PI);
      this.bipedHead.rotateAngleX = par5 / (180F / (float)Math.PI);
      this.bipedRightArm.rotateAngleX = base_arm_rotate_x + MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 2.0F * par2 * 0.5F;
      this.bipedLeftArm.rotateAngleX = base_arm_rotate_x + MathHelper.cos(par1 * 0.6662F) * 2.0F * par2 * 0.5F;
      this.bipedRightArm.rotateAngleZ = 0.0F;
      this.bipedLeftArm.rotateAngleZ = 0.0F;
      this.bipedRightLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
      this.bipedLeftLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
      this.bipedRightLeg.rotateAngleY = 0.0F;
      this.bipedLeftLeg.rotateAngleY = 0.0F;

      this.bipedRightArm.rotateAngleY = 0.0F;
      this.bipedLeftArm.rotateAngleY = 0.0F;
      float f6;
      float f7;

      if (this.onGround > -9990.0F)
      {
    	  f6 = this.onGround;
          this.bipedBody.rotateAngleY = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI * 2.0F) * 0.2F;
          this.bipedRightArm.rotationPointZ = MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
          this.bipedRightArm.rotationPointX = -2.5F + -MathHelper.cos(this.bipedBody.rotateAngleY);// * 5.0F;
          this.bipedLeftArm.rotationPointZ = -MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
          this.bipedLeftArm.rotationPointX = 2.5F + MathHelper.cos(this.bipedBody.rotateAngleY);// * 5.0F;
          this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY;
          this.bipedLeftArm.rotateAngleY += this.bipedBody.rotateAngleY;
          this.bipedLeftArm.rotateAngleX += this.bipedBody.rotateAngleY;
          f6 = 1.0F - this.onGround;
          f6 *= f6;
          f6 *= f6;
          f6 = 1.0F - f6;
          f7 = MathHelper.sin(f6 * (float)Math.PI);
          float f8 = MathHelper.sin(this.onGround * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * 0.75F;
          this.bipedRightArm.rotateAngleX = (float)((double)this.bipedRightArm.rotateAngleX - ((double)f7 * 1.2D + (double)f8));
          this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY * 2.0F;
          this.bipedRightArm.rotateAngleZ = MathHelper.sin(this.onGround * (float)Math.PI) * -0.4F;
      }

      

      this.bipedRightArm.rotateAngleZ += MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
      this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
      this.bipedRightArm.rotateAngleX += MathHelper.sin(par3 * 0.067F) * 0.05F;
      this.bipedLeftArm.rotateAngleX -= MathHelper.sin(par3 * 0.067F) * 0.05F;
      
      setRotation(this.leftclaw1, this.bipedLeftArm.rotateAngleX + claw_rotate_offset, this.bipedLeftArm.rotateAngleY, this.bipedLeftArm.rotateAngleZ);
      setRotation(this.leftclaw2, this.bipedLeftArm.rotateAngleX + claw_rotate_offset, this.bipedLeftArm.rotateAngleY, this.bipedLeftArm.rotateAngleZ);
      setRotation(this.leftclaw3, this.bipedLeftArm.rotateAngleX + claw_rotate_offset, this.bipedLeftArm.rotateAngleY, this.bipedLeftArm.rotateAngleZ);
      
      setRotation(this.rightclaw1, this.bipedRightArm.rotateAngleX + claw_rotate_offset, this.bipedRightArm.rotateAngleY, this.bipedRightArm.rotateAngleZ);
      setRotation(this.rightclaw2, this.bipedRightArm.rotateAngleX + claw_rotate_offset, this.bipedRightArm.rotateAngleY, this.bipedRightArm.rotateAngleZ);
      setRotation(this.rightclaw3, this.bipedRightArm.rotateAngleX + claw_rotate_offset, this.bipedRightArm.rotateAngleY, this.bipedRightArm.rotateAngleZ);
      
      this.leftclaw1.rotationPointX = this.bipedLeftArm.rotationPointX;
      this.leftclaw1.rotationPointY = this.bipedLeftArm.rotationPointY;
      this.leftclaw1.rotationPointZ = this.bipedLeftArm.rotationPointZ;

      this.leftclaw2.rotationPointX = this.bipedLeftArm.rotationPointX;
      this.leftclaw2.rotationPointY = this.bipedLeftArm.rotationPointY;
      this.leftclaw2.rotationPointZ = this.bipedLeftArm.rotationPointZ;
      
      this.leftclaw3.rotationPointX = this.bipedLeftArm.rotationPointX;
      this.leftclaw3.rotationPointY = this.bipedLeftArm.rotationPointY;
      this.leftclaw3.rotationPointZ = this.bipedLeftArm.rotationPointZ;
      
      this.rightclaw1.rotationPointX = this.bipedRightArm.rotationPointX;
      this.rightclaw1.rotationPointY = this.bipedRightArm.rotationPointY;
      this.rightclaw1.rotationPointZ = this.bipedRightArm.rotationPointZ;
      
      this.rightclaw2.rotationPointX = this.bipedRightArm.rotationPointX;
      this.rightclaw2.rotationPointY = this.bipedRightArm.rotationPointY;
      this.rightclaw2.rotationPointZ = this.bipedRightArm.rotationPointZ;
      
      this.rightclaw3.rotationPointX = this.bipedRightArm.rotationPointX;
      this.rightclaw3.rotationPointY = this.bipedRightArm.rotationPointY;
      this.rightclaw3.rotationPointZ = this.bipedRightArm.rotationPointZ;
  }

}
